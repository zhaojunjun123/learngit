111111111111111111


MVC优点
	1、分为三层，实现软件的低耦合性。
	2、代码更加规范，命名更加规范。
	3、开发效率高，项目周期短
MVC缺点
	1、加大理解的难度。
	2、c层工作繁重。MVCL....
	3、c层和v层关系紧密
	4、工作效率低

thinkphp
	1,安装  在index.php设置
	//指定项目的目录
	define("APP_PATH","./shop/");
	//指定项目的名称
	define("APP_NAME","shop");
	//加载ThinkPHP.php
	require("./ThinkPHP/ThinkPHP.php");
	//打开调试模式：
	define('APP_DEBUG',true);
	目录结构
	Tpl-----模板  也就是v层的东西
	Runtime-----程序运行过程中产生的文件，要是出现了，检查不出错误的时候试着清空里边的东西。
	Lib---项目的核心内容 action里边放C层的东西 model里边放M层的东西
	Lang---语言包，一般的时候不用管他
	Conf----配置文件 除了上边写的那些放到index。php中，剩下的配置都是在这个里边
	Common----公共函数 common.php，必须叫这个名字才可以自动加载。

	命名规则
	目录：首字母大写
	文件：类文件  XxxCcc.class.php
	方法名 小驼峰  getNewsById()
	配置文件，函数文件名称 小写.php
	函数名称小写，可以用_分隔。

	C层编写
	url地址规则：
	index.php?g=分组名&m=控制器名&a=方法名称
	index.php/分组名/控制器名/方法名称
	rewrite 只要是有apache便都支持这个模式
		News_detail_5.html  index.php/News/detail/5
	URL_MODEL  => 0 1 2   U(控制器/方法)可以快速生成url
	在config中设置
		'DEFAULT_GROUP'         => 'Home',  // 默认分组
    	'DEFAULT_MODULE'        => 'Index', // 默认模块名称
    	'DEFAULT_ACTION'        => 'index', // 默认操作名称
	
	定义控制器：
	1、放在Lib/Action/
	2、名称 XxxAction.class.php
	3、类名和类文件名同名
	class XxxAction
	4、必须继承 Action 基类
	基类Action方法：
	1、显示模板
	$this->display();
	默认模板规则：
		Tpl/控制器同名/方法同名.html
	模板路径写法：
		./shop/Tpl/控制器同名/方法同名.html
	模板路径写法：
		$this->display("控制器名/方法名")
	模板路径写法：
		$this->display('方法名');
	2、给模板传值
	$this->assign('模板变量名称',被传递的变量);
	3、初始化方法
	function _initialize(){
		每个方法执行之前应该做的事情。
	}
	如果有很多控制器中都需要有这个初始化方法，则应该想到了得多定义一个类让他们去继承定义的这个类，如果不多的话，直接每个里边自己写就好了
	4、跳转提示
	$this->success("提示语","url地址");
	$this->error('提示语','url地址');
	
	第三个参数如果是true的话就是返回的json字符串，如果添加的是数字的话，那就是等待的秒数
	指定跳转等待时间：$this->assign('waitSecond',5);
	
	自定义两个模板，success(),error()
	
	1、新建两个模板
	2、$this->success()，调用Tpl/Public/success.html
	   $this->error(),调用Tpl/Public/error.html

	5、重定向
	$this->redirect("控制器/方法",array(),等待时间,提示语)
	
	M层编写
	1、配置数据库连接在config里边
		'DB_TYPE'   => 'mysql', // 数据库类型
        'DB_HOST'   => 'localhost', // 服务器地址
        'DB_NAME'   => 'thinkphp', // 数据库名
        'DB_USER'   => 'root', // 用户名
        'DB_PWD'    => '', // 密码
        'DB_PORT'   => 3306, // 端口
        'DB_PREFIX' => 'think_', // 数据库表前缀 
	2、测试数据连接是否成功，在c层当中也行，在m层也行
		$ob=new Model("news");
		$arr=$ob->select();
		var_dump($arr);
	3、数据模型类封装
	a、放到Lib/Model
	b、继承Model
	c、XxxModel.class.php,类名和类文件名一致
	d、cms_xxx默认的表名
	e、指定表名称
	protected $tableName="xxx";
	protected $trueTableName="cms_xxx";
	4、查询 增 删 改 
	查询：
	select n.id,n.title,c.cname from cms_news n join cms_category c on n.cateid=c.id 
	array $this->select()是个二维数组
	object $this->alias('n');//给表起别名
	object $this->join("cms_category c on n.cateid=c.id");
	object $this->field("n.id,n.title,c.cname")//指定字段列表
	object $this->where("n.id=5")//指定查询条件
	object $this->limit("0,5")//指定的limit子句的内容
	object $this->order("id desc")//排序
	object $this->group("字段名称");//分组查询
	object $this->having('num>70');
	object $this->table("真实表名");//指定表名
	例子：查询出每个栏目下文章的条数
	select count(*) as num,cateid from cms_news group by cateid;
	例子：查询出哪些栏目下的文章条数大于70
	select count(*) as num,cateid from cms_news group by cateid having num>70;

	添加：
	产生数据
	object data(array('title'=>'ttt',.....))
	create([array('title'=>'ttt',.....)])
	说明： create()如果没有传参，自动去$_POST中找
	自动完成，自动验证，令牌验证的时候必须用create()方法

	增加

	$this->data($_POST)->add();返回值是影响的行数
	数据模型类对象->getLastSql();
	快捷函数：
	U("控制器名/方法名/id/5")
	U("控制器名/方法名",array('id'=>5,...))
	作用：生成url地址
	M("表名") new Model("表名")
	作用：实例化数据模型类Model
	D("News")
作用：实例化数据模型类，如果数据模型类存在，则实例化对应的数据模型类，否则是model

	修改
		$this->data($_POST)->save();
	if($this->create()){
		$this->where($where)->save();
	}else{
	
	}
	删除
		$this->where($where)->delete();

令牌验证
原理：在表单中存放一个隐藏域，每次值随机产生，这个值同时保存在session中，当数据入表前，把表单中隐藏域的值和session中的比对，成功，入表，失败不写表。
'TOKEN_ON'=>true,  // 是否开启令牌验证
'TOKEN_NAME'=>'__hash__',    // 令牌验证的表单隐藏字段名称
'TOKEN_TYPE'=>'md5',  //令牌哈希验证规则 默认为MD5
'TOKEN_RESET'=>true,  //令牌验证出错后是否重置令牌 默认为true
在m层，产生数据时，使用函数create()
	
自动验证
//数据模型类中
protected $_validate=array(
	array(验证字段,验证规则,错误提示,[验证条件,附加规则,验证时间])
,//指定一条验证规则
);
验证条件
	0---字段存在 默认
	1---必须验证
	2---值不为空验证
附加规则：
	*regex 正则表达式 默认
	function 函数
	*confirm 验证两个字段的值是否相同
	equal 是否等于某一个值
	in 字段值是否在一个数组中
	*between 是否在两个值之间 array(min,max)
	length 内容长度 min,max
	*unique  唯一  验证规则为空
验证时间：
	1---添加 
	2---修改
	3---两者都 默认

自动完成：对表单的传值，二次处理。然后在写到表中。
protected $_auto=array(
	array(填充字段,填充内容,[填充条件,附加规则]),
);
附加规则：
	function
	string
	field	

为什么对密码进行加密处理？？
	安全，数据库数据被窃取后，依然安全。
	可以破解。碰撞。

Smarty
	作用：php和html分离
	使用：
	1、配置
	require ROOT."/Lib/Smarty.class.php";
	$smartyOb=new Smarty();
	$smartyOb->setTemplateDir(ROOT."demo/template");
	$smartyOb->setCompileDir(ROOT.'demo/template_c');
	$smartyOb->setCacheDir(ROOT.'demo/cache');
	$smartyOb->left_delimiter="{";
	$smartyOb->right_delimiter="}";
	2、方法
	assign()
	display()
	fetch()
	3、模板接收展现数据
	注释
	{**}
	变量标签
	{$名称}
	{$名称.下标}
	循环标签
	{foreach $数组名 as $k=>$v}
	{$v.下标}
	{foreachelse}
	
	{/foreach}
	属性：
	$v@index
	$v@iteration
	$v@total
	$v@first
	$v@last
	条件标签
	{if 条件}
	{else}
	{/if}
	加载
	{include file="path"}
	变量调节器
	{$变量|函数名:第二个参数:....}
	预定义变量，常量使用
	$smarty.get
	$smarty.post
	$smarty.request
	$smarty.session
	$smarty.cookies
	$smarty.server

	$smarty.const.常量名
	4、缓存
	$smartyOb->caching=true;
	$smartyOb->cache_lifetime=3600;
	
v层操作 Think
	变量标签：
	{$变量名称}
	{$数组名称.下标}
	{$数组名称[下标]}
	数组遍历：
	<foreach name='数组遍历名称' item='v'>
	{$v.下标}
	</foreach>
volist循环标签：
<volist name="list" id="vo">
{$vo.id}
{$vo.name}
</volist>

条件标签：
<if condition="($name eq 1) OR ($name gt 100) "> value1
<elseif condition="$name eq 2"/>value2
<else /> value3
</if>

	eq等于  gt大于  lt小于  neq不等于  egt大于等于
	elt 小于等于  heq恒等于   hneq恒不等于
说明：在condition中可以使用函数。

加载标签：
	<include file="模板路径"/>
	模板路径的写法：
	./shop/Tpl/.....
	控制器/方法名
	方法名

引入标签：
	<import type='js' file="Js.Util.Array" />
变量调节器，函数使用：
	{$varname|function1=arg1,arg2,### }
	###被调节变量出现的位置。
	被调节的变量，正好是函数的第一个参数，###可以省略
例子：
	1、把字符串中的小写字母转化成大写。
	{$str|strtoupper}
	2、把时间戳，转化成时间日期格式字符串
	{$t|date='Y-m-d H:i:s',###}
	3、截取字符串abcabcabc,从第二个，
	截取5个下来
	{$str|substr=1,5}
第二种写法：
	{:function(…)} function位置传的是函数的名称 括号里边的参数按php中的传

常量预定义变量在模板上使用：
	$Think.get.名称
	$Think.post.名称
	$Think.request.名称
	$Think.cookie.名称
	$Think.session.名称
	$Think.server.名臣

	$Think.const.名称
模板替换：
	在模板上用来产生url地址的某一部分。
	__PUBLIC__   Public文件夹对应的url地址
	__ROOT__  获取当前url地址到项目目录
	__APP__ 到入口文件
	__GROUP__ 到分组
	__URL__ 到控制器
	__ACTION__ 到方法
	__SELF__ 所有

分组：
	修改配置文件
	'APP_GROUP_LIST'=>'Home,Admin,User',
	'DEFAULT_GROUP'=>'Home',
	创建分组对应的文件夹
	Lib/Action/Home   admin  user
	Tpl/Home/控制器名称/方法名.html
产品模块：
	后台
		    登录表单-----------------------
			|			  |
			|			  |
			判断用户名及密码----错误--
			|
			|正确
			后台首页
		
	前台
	表单：
		产品控制器，方法 add
		文件上传
	UploadFile.class.php
	357行 $saveName = $rule('',true).".".$filename['extension'];
		缩略图
	产品列表
		分页
	产品修改
	产品删除
	
	前台
公共类：
	验证码
	import("ORG.Util.Image");
	Image::buildImageVerify();
	验证码比对
	md5($_POST[verify]) == $_SESSION['verify']
	$mode=1
	0----大小写字母
	1----数字
	2----大写字母
	3----小写字母
	分页类
	//获取总条数
	//确定每页的条数	
	import("ORG.Util.Page");
	$pageOb=new Page(总条数,每页条数);
	//获取开始位置
	$start=$pageOb->firstRow;
	//获取当前页的数据
	//获取分页的结果
	$pageStr=$pageOb->show();
	文件上传类
		import("ORG.Net.UploadFile");
		$UploadOb=new UploadFile();
		//指定允许的大小
		$UploadOb->maxSize=200000;
		//执行允许的类型
		$UploadOb->allowTypes=array('image/png','image/jpeg','image/gif');
		//保存路径
		$UploadOb->savePath="./Public/upload/";
		$re=$UploadOb->upload();
		if($re){//成功
			$arr=$UploadOb->getUploadFileInfo();
			var_dump($arr);
		}else{
			var_dump($UploadOb->getErrorMsg());
		}
	缩略图类
		$UploadOb->thumb=true;
		$UploadOb->thumbMaxWidth='200,50';
		$UploadOb->thumbMaxHeight='200,50';
		$UploadOb->thumbPrefix="s_,s2_";
		$UploadOb->thumbPath="./Public/upload/thumb/";
